import "./util.scrypt";

// a de/serializer for basic types
contract Serializer {
    bytes buf;
    int pos;

    constructor(bytes buf) {
        this.buf = buf;
        this.pos = 0;
    }

    // uses fixed 1 byte to represent a boolean, no length prefix needed
    static function writeBool(bool x): bytes {
        return x ? b'00' : b'01';
    }

    function readBool(): bool {
        bool ret = this.buf[this.pos] == '00';
        this.pos = this.pos + 1;
        return ret;
    }

    // VarInt encoding
    static function writeBytes(bytes x): bytes {
        return Util.writeVarint(x);
    }

    function readBytes(): bytes {
        int len = Util.readVarintLen(this.buf[this.pos:]);
        bytes ret = Util.readVarint(this.buf[this.pos:]);
        this.pos = this.pos + len;
        return ret;
    }

    // int is little endian 
    static function writeInt(int x): bytes {
        return Serializer.writeBytes(pack(x));
    }

    function readInt(): int {
        return unpack(this.readBytes());
    }
}


contract Test {
  public function main(bool f, bytes b, int i) {
    {
        bytes buf = Serializer.writeBool(f);
        Serializer s = new Serializer(buf);
        bool f_ = s.readBool();
        require(f_ == f);
    }

    {
        bytes buf = Serializer.writeBytes(b);
        Serializer s = new Serializer(buf);
        bytes b_ = s.readBytes();
        require(b_ == b);
    }
    
    {
        bytes buf = Serializer.writeInt(i);
        Serializer s = new Serializer(buf);
        int i_ = s.readInt();
        require(i_ == i);
    }

    bytes buf = Serializer.writeInt(i) + Serializer.writeBytes(b) + Serializer.writeBytes(b) 
                + Serializer.writeBool(f) + Serializer.writeInt(i) + Serializer.writeBytes(b);
    Serializer s = new Serializer(buf);
    int i_ = s.readInt();
    require(i_ == i);
    bytes b_ = s.readBytes();
    require(b_ == b);
    b_ = s.readBytes();
    require(b_ == b);
    bool f_ = s.readBool();
    require(f_ == f);
    i_ = s.readInt();
    require(i_ == i);
    b_ = s.readBytes();
    require(b_ == b);
  }
}