import "util.scrypt";

// Conway Game Of Life on a board of N * N
contract GameOfLife {
    static int N = 10;
    static bytes LIVE = b'01';
    static bytes DEAD = b'00';

    public function play(int amount, SigHashPreimage txPreimage) {
        require(Tx.checkPreimage(txPreimage));

        bytes scriptCode = Util.scriptCode(txPreimage);
        int scriptLen = len(scriptCode);

        int BOARDLEN = GameOfLife.N * GameOfLife.N;
        int boardStart = scriptLen - BOARDLEN;
        bytes oldBoard = scriptCode[boardStart : ];

        // make the move
        bytes newBoard = this.evolve(oldBoard);

        // update state: next turn & next board
        bytes scriptCode_ = scriptCode[ : scriptLen - BOARDLEN] + newBoard;
        bytes output = Util.buildOutput(scriptCode_, amount);
        bytes outputs = output;

        require(hash256(outputs) == Util.hashOutputs(txPreimage));
    }

    function evolve(bytes oldBoard) : bytes {
        bytes newBoard = oldBoard;

        int i = 1;
        // N - 2
        loop (8) {
            int j = 1;
            
            loop (8) {
                bytes nextState = this.next(oldBoard, i, j);
                newBoard = Util.setElemAt(newBoard, this.index(i, j), nextState);

                j = j + 1;
            }

            i = i + 1;
        }

        return newBoard;
    }

    function next(bytes oldBoard, int row, int col) : bytes {
        // number of neighbors alive
        int alive = 0;

        int i = - 1;
        loop (3) {
            int j = - 1;

            loop (3) {
                if (Util.getElemAt(oldBoard, this.index(row + i, col + j))) {
                    alive = alive + 1;
                }
                j = j + 1;
            }

            i = i + 1;
        }

        bytes oldState = Util.getElemAt(oldBoard, this.index(row, col));
        /* rule
        1. Any live cell with two or three live neighbours survives.
        2. Any dead cell with three live neighbours becomes a live cell.
        3. All other live cells die in the next generation. Similarly, all other dead cells stay dead.
        */
        return(alive == 3 || alive == 2 && oldState == GameOfLife.LIVE) ? GameOfLife.LIVE : GameOfLife.DEAD;
    }

    function index(int i, int j) : int {
        return i * GameOfLife.N + j;
    }
}