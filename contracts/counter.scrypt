contract Counter {
    public function increment(bytes sighashPreimage, int amount) {
        Tx tx = new Tx();
        require(tx.validate(sighashPreimage));

        int len = length(sighashPreimage);
		bytes hashOutputs = sighashPreimage[len - 40 : len - 8];
		// scriptCode is just scriptPubKey if there is no CODESEPARATOR in the latter
		bytes scriptCode = this.readVarint(sighashPreimage[104:len]);
		// output: amount + scriptlen + script
		Sha256 hashOutputs_ = hash256(num2bin(amount, 8) ++ this.writeVarint(scriptCode));
		// ensure output amount is same with specified, also output script is the same with scriptCode
		require(hashOutputs == hashOutputs_);
    }

    function readVarint(bytes b) returns (bytes) {
		int len = 0;
		bytes ret = b"";
		bytes header = b[0:1];

		if (header == b"fd") {
			len = this.fromLEUnsigned(b[1:3]);
			ret = b[3:3+len];
		} else if (header == b"fe") {
			len = this.fromLEUnsigned(b[1:5]);
			ret = b[5:5+len];
		} else if (header == b"ff") {
			len = this.fromLEUnsigned(b[1:9]);
			ret = b[9:9+len];
		} else {
			len = this.fromLEUnsigned(b[0:1]);
			ret = b[1:1+len];
		}

		return ret;
	}

    function writeVarint(bytes b) returns (bytes) {
		int n = length(b);
		
		bytes header = b"";

		if (n < 0xfd) {
			header = this.toLEUnsigned(n, 1);
		} else if (n < 0x10000) {
			header = b"fd" ++ this.toLEUnsigned(n, 2);
		} else if (n < 0x100000000) {
			header = b"fe" ++ this.toLEUnsigned(n, 4);
		} else if (n < 0x10000000000000000) {
			header = b"ff" ++ this.toLEUnsigned(n, 8);
		}

		return header ++ b;
	}

    // convert signed integer `n` to unsigned integer of `len` bytes, in little endian
	function toLEUnsigned(int n, int len) returns (bytes) {
		// one extra byte to accommodate possible negative sign byte
		bytes m = num2bin(n, len + 1);
		// remove sign byte
		return m[0 : length(m) - 1];
	}

    function fromLEUnsigned(bytes b) returns (int) {
		// append positive sign byte. This does not hurt even when sign bit is already positive
		return unpack(b ++ b"00");
	}
}