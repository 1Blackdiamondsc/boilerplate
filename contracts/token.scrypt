/**
 * A toy token example between two holders
 */
contract Token {
    public function transfer(PubKey sender, Sig senderSig, PubKey receiver, 
		int value /* amount to be transferred */, bytes txPreimage, int amount) {
        Tx tx = new Tx();
		// this ensures the preimage is for the current tx
		require(tx.validate(txPreimage));

        // authorize
        require(checkSig(senderSig, sender));

        // read previous locking script
        bytes lockingScript = this.readVarint(txPreimage[104:]);
        int scriptLen = length(lockingScript);

        PubKey pk0 = PubKey(lockingScript[scriptLen - 68 : scriptLen - 35]);
        int balance0 = unpack(lockingScript[scriptLen - 35 : scriptLen - 34]);
        PubKey pk1 = PubKey(lockingScript[scriptLen - 34 : scriptLen - 1]);
        int balance1 = unpack(lockingScript[scriptLen - 1 : ]);

        // only between two holders
        require(sender == pk0 && receiver == pk1 || sender == pk1  && receiver == pk0);

        // transfer
        if (sender == pk0) {
            require(balance0 >= value);
            balance0 = balance0 - value;
            balance1 = balance1 + value;
        } else {
            require(balance1 >= value);
            balance1 = balance1 - value;
            balance0 = balance0 + value;
        }

        // write new locking script
        bytes lockingScript_ = lockingScript[: scriptLen - 68] ++ pk0 ++ num2bin(balance0, 1) ++ pk1 ++ num2bin(balance1, 1);
        int len = length(txPreimage);
        bytes hashOutputs = txPreimage[len - 40 : len - 8];
        Sha256 hashOutputs_ = hash256(num2bin(amount, 8) ++ this.writeVarint(lockingScript_));
		require(hashOutputs == hashOutputs_);
    }

    function readVarint(bytes b) returns (bytes) {
		int len = 0;
		bytes ret = b"";
		bytes header = b[0:1];

		if (header == b"fd") {
			len = this.fromLEUnsigned(b[1:3]);
			ret = b[3:3+len];
		} else if (header == b"fe") {
			len = this.fromLEUnsigned(b[1:5]);
			ret = b[5:5+len];
		} else if (header == b"ff") {
			len = this.fromLEUnsigned(b[1:9]);
			ret = b[9:9+len];
		} else {
			len = this.fromLEUnsigned(b[0:1]);
			ret = b[1:1+len];
		}

		return ret;
	}

    function writeVarint(bytes b) returns (bytes) {
		int n = length(b);
		
		bytes header = b"";

		if (n < 0xfd) {
			header = this.toLEUnsigned(n, 1);
		} else if (n < 0x10000) {
			header = b"fd" ++ this.toLEUnsigned(n, 2);
		} else if (n < 0x100000000) {
			header = b"fe" ++ this.toLEUnsigned(n, 4);
		} else if (n < 0x10000000000000000) {
			header = b"ff" ++ this.toLEUnsigned(n, 8);
		}

		return header ++ b;
	}

    // convert signed integer `n` to unsigned integer of `len` bytes, in little endian
	function toLEUnsigned(int n, int len) returns (bytes) {
		// one extra byte to accommodate possible negative sign byte
		bytes m = num2bin(n, len + 1);
		// remove sign byte
		return m[0 : length(m) - 1];
	}

    function fromLEUnsigned(bytes b) returns (int) {
		// append positive sign byte. This does not hurt even when sign bit is already positive		return unpack(b ++ b"00");	}}