library Array {
    static const bytes EMPTY = b'';
    bytes data;
    int DATALEN;
    constructor(bytes data, int DATALEN) {
        this.data = data;
        this.DATALEN = DATALEN;
    }
    function clear() : bool {
        this.data = EMPTY;
        return true;
    }
    function push(int x) : bool {
        this.data += num2bin(x, this.DATALEN);
        return true;
    }
    function length(): int {
        return len(this.data) / this.DATALEN;
    }
    function pop() : int {
        int answer = unpack(this.data[this.length() - this.DATALEN:]);
        this.data = this.data[:this.length() - this.DATALEN];
        return answer;
    }
    function get(int index) : int {
        return unpack(this.data[index*this.DATALEN: (index+1)*this.DATALEN]);
    }
    function write(int index, int elem) : bool {
        this.data = this.data[:index*this.DATALEN] + num2bin(elem, this.DATALEN) + this.data[(index+1)*this.DATALEN:];
        return true;
    }
}

contract ArrayTest {
    static const int size_test = 7;
    public function test(int x) {
        Array a = new Array(b'', 1);
        loop(size_test): i {
            a.push(i);
        }
        loop(size_test): i {
            require(a.get(i) == i);
        }
        loop(size_test): i {
            a.write(i, 17*i);
            loop(size_test): j {
                if (i != j) {
                    require(a.get(j) == j);
                }
                else {
                    require(a.get(j) == 17*j);
                }
            }
            a.write(i, i);
        }
        loop(size_test): i {
            require(a.get(i) == i);
        }
        loop(size_test): i {
            require(a.pop() == size_test - 1 - i);
        }
        require(a.length() == 0);
    }
}
