//Please modify everything that has the mention "please modify"

//You need to modify the struct Object so that it fits your need
//You want a for loop => you need a struct with a single int i
//You want a double for loop => you need a struct with two int i and int j
//You want to compute the gcd of 2 numbers => you need a struct with two int

//Then you need to change my_great_function, which is basically your recursive function
//set recursion_call to true if you want to call again the function

//And finally you need to write a bytes<->Object conversion. So 2 functions


//Please modify
struct Object {
    int n;
}

//DO NOT MODIFY
struct DoNotTouch {
    Object computation;
    bool recursion;
}

library Aux {
    //Please modify
    static const int fee = 5000;
    //Please modify
    static const int SizeOfObject = 1; //How many bytes your object will be in memory. Must be length(this.object_to_byte(object))
    //Please modify
    static function my_great_function(Object object): DoNotTouch {
        bool recursion_call = false;
        //Begin the modification below
        
        //What matters is to modify object with its new value,
        //and set recursion_call to true if you want to do a recursion call

        //---------------------------
        //Example of a simple recursive function
        //If n == 0 we stop here
        if (object.n == 0) {
            object.n = 0;
        }
        //Otherwise lets decrease it by one
        else {
            object.n -= 1;
            //And make the recursion call
            recursion_call = true;
        }
        //-----------------------
        
        //End of the modification
        return {object, recursion_call};
    }
    //Please modify
    static function bytes_to_object(bytes b): Object {
        return {unpack(b)};
    }
    //Please modify
    static function object_to_bytes(Object object): bytes {
        return num2bin(object.n, 1);
    }
}
